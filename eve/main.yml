---
version: "0.2"

branches:
  default:
    stage: pre-merge

stages:
  pre-merge:
    worker:
      type: local
    steps:
      - TriggerStages:
          name: Trigger build and lint stages simultaneously
          stage_names:
            - build
            - lint
          haltOnFailure: true
      - SetPropertyFromCommand:
          name: Set short version as property from built artifacts
          property: metalk8s_short_version
          command: >
            bash -c '
            . <(curl -s "%(prop:artifacts_private_url)s/product.txt") &&
            echo $SHORT_VERSION'
      - TriggerStages:
          name: Trigger single-node deployment with built ISO
          stage_names:
            - single-node

  build:
    worker:
      type: kube_pod
      path: eve/workers/pod-builder/pod.yaml
      images:
        docker-builder: eve/workers/pod-builder
    steps:
      - ShellCommand:
          name: Wait for Docker daemon to be ready
          command: |
            bash -c '
            for i in {1..10}
            do
              docker --version &> /dev/null && exit
              sleep 2
            done
            echo "Could not reach Docker daemon from buildbot worker" >&2
            exit 1'
          haltOnFailure: true
      - Git: &git_pull
          name: git pull
          repourl: "%(prop:git_reference)s"
          method: clobber
          retryFetch: true
          haltOnFailure: true
      - ShellCommand:
          name: build everything
          command: make
      - ShellCommand:
          name: Put the iso file in a separate folder
          command: >
            mkdir iso &&
            cp _build/metalk8s.iso _build/SHA256SUM _build/root/product.txt iso
      - Upload:
          name: upload artifacts
          source: iso/
          urls:
            - "*.iso"
            - "SHA256SUM"
            - "product.txt"

  lint:
    worker:
      type: kube_pod
      path: eve/workers/pod-linter/pod.yaml
      images:
        docker-linter: eve/workers/pod-linter
    steps:
      - Git: *git_pull
      - ShellCommand:
          name: Run all linting targets
          command: make lint
          haltOnFailure: false

  single-node:
    worker:
      type: openstack
      image: CentOS 7 (PVHVM)
      flavor: m1.medium
      path: eve/workers/openstack-single-node
    steps:
      - ShellCommand:
          name: Report VM network settings
          command: ip a
      - ShellCommand:
          name: Create ssh directory
          command: mkdir -p ~/.ssh
      - ShellCommand:
          name: Push platform team keys
          command: echo "%(secret:ssh_pub_keys)s" >> ~/.ssh/authorized_keys
      - ShellCommand:
          name: Retrieve ISO image
          command: >
            curl -XGET -o metalk8s.iso
            "%(prop:artifacts_private_url)s/metalk8s.iso"
          haltOnFailure: true
      - ShellCommand:
          name: Retrieve ISO image checksum
          command: >
            curl -XGET -o SHA256SUM
            "%(prop:artifacts_private_url)s/SHA256SUM"
          haltOnFailure: true
      - ShellCommand:
          name: Check image with checksum
          command: sha256sum -c SHA256SUM
          haltOnFailure: true
      - ShellCommand:
          name: Create mountpoint
          command: >
            sudo mkdir -p /srv/scality/metalk8s-%(prop:metalk8s_short_version)s
      - ShellCommand:
          name: Mount ISO image
          command: >
            sudo mount -o loop metalk8s.iso
            /srv/scality/metalk8s-%(prop:metalk8s_short_version)s
          haltOnFailure: true
      - ShellCommand:
          name: Start the bootstrap process
          command: >
            sudo bash
            /srv/scality/metalk8s-%(prop:metalk8s_short_version)s/bootstrap.sh
          usePTY: true
          haltOnFailure: false
      - ShellCommand:
          name: Sleep before bootstrap for debug
          timeout: 3600
          command: sleep 60m
